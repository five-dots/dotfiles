## Utility functions

# Decide whether we're in a Vim process
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?\.?(view|n?vim?x?)(-wrapped)?(diff)?$'"

## Prefix key-table
bind-key -T prefix C-b send-prefix
bind-key -T prefix -N "Detach the current client" d detach-client

# Window
bind-key -T prefix -N "Create a new window"   c new-window
bind-key -T prefix -N "Rename current window" , 'command-prompt -I "#W" { rename-window "%%" }'
bind-key -T prefix -N "Select window 1"       1 "select-window -t :=1"
bind-key -T prefix -N "Select window 2"       2 "select-window -t :=2"
bind-key -T prefix -N "Select window 3"       3 "select-window -t :=3"
bind-key -T prefix -N "Select window 4"       4 "select-window -t :=4"
bind-key -T prefix -N "Select window 5"       5 "select-window -t :=5"
bind-key -T prefix -N "Select window 6"       6 "select-window -t :=6"
bind-key -T prefix -N "Select window 7"       7 "select-window -t :=7"
bind-key -T prefix -N "Select window 8"       8 "select-window -t :=8"
bind-key -T prefix -N "Select window 9"       9 "select-window -t :=9"
bind-key -T prefix -N "Kill window"           x "kill-window"

## Root key-table

# Select pane by hjkl without cycling
# https://github.com/tmux/tmux/wiki/Recipes#prevent-pane-movement-wrapping
# bind-key -n M-h if-shell "$is_vim" "send-keys M-h" 'if-shell -F "#{pane_at_left}"   "" "select-pane -L"'
# bind-key -n M-j if-shell "$is_vim" "send-keys M-j" 'if-shell -F "#{pane_at_bottom}" "" "select-pane -D"'
# bind-key -n M-k if-shell "$is_vim" "send-keys M-k" 'if-shell -F "#{pane_at_top}"    "" "select-pane -U"'
# bind-key -n M-l if-shell "$is_vim" "send-keys M-l" 'if-shell -F "#{pane_at_right}"  "" "select-pane -R"'

bind-key -n M-h if-shell "$is_vim" "send-keys M-h" "select-pane -L"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j" "select-pane -D"
bind-key -n M-k if-shell "$is_vim" "send-keys M-k" "select-pane -U"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l" "select-pane -R"

bind-key -n C-M-h if-shell "$is_vim" "send-keys C-M-h" "resize-pane -L 5"
bind-key -n C-M-j if-shell "$is_vim" "send-keys C-M-j" "resize-pane -D 5"
bind-key -n C-M-k if-shell "$is_vim" "send-keys C-M-k" "resize-pane -U 5"
bind-key -n C-M-l if-shell "$is_vim" "send-keys C-M-l" "resize-pane -R 5"

bind-key -n M-H 'run-shell "${XDG_CONFIG_HOME}/tmux/scripts/swap_pane.sh left"'
bind-key -n M-J 'run-shell "${XDG_CONFIG_HOME}/tmux/scripts/swap_pane.sh down"'
bind-key -n M-K 'run-shell "${XDG_CONFIG_HOME}/tmux/scripts/swap_pane.sh up"'
bind-key -n M-L 'run-shell "${XDG_CONFIG_HOME}/tmux/scripts/swap_pane.sh right"'

bind-key -n M-q kill-pane
bind-key -n M-m "resize-pane -Z"

bind-key -n C-M-r source "${XDG_CONFIG_HOME}/tmux/tmux.conf"

# Toggle popup pane
bind-key -n M-f 'run-shell "${XDG_CONFIG_HOME}/tmux/scripts/display_popup.sh #{session_name} #{window_index} #{pane_current_path}"'
bind-key -n M-g 'run-shell "${XDG_CONFIG_HOME}/tmux/scripts/display_popup.sh #{session_name} #{window_index} #{pane_current_path} lazygit"'
bind-key -n M-t 'run-shell "${XDG_CONFIG_HOME}/tmux/scripts/display_popup.sh #{session_name} #{window_index} #{pane_current_path} taskwarrior-tui"'

## Copy mode vi key-table

bind-key -T copy-mode-vi v   send-keys -X begin-selection
bind-key -T copy-mode-vi C-q send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y   send-keys -X copy-pipe-and-cancel

## Popup menu

bind-key -n M-\; display-menu \
  -T "#[align=centre fg=green]Tmux Prefix Menu" \
  "" \
  "-#[align=centre]Session" "" "" \
  "Detach" d detach-client \
  "" \
  "-#[align=centre]Window" "" "" \
  "Create a new window" c "new-window" \
  "Rename current window" , 'command-prompt -I "#W" { rename-window "%%" }' \
  "Select window 1" 1 "select-window -t :=1" \
  "Select window 2" 2 "select-window -t :=2" \
  "Select window 3" 3 "select-window -t :=3" \
  "Select window 4" 4 "select-window -t :=4" \
  "Select window 5" 5 "select-window -t :=5" \
  "Select window 6" 6 "select-window -t :=6" \
  "Select window 7" 7 "select-window -t :=7" \
  "Select window 8" 8 "select-window -t :=8" \
  "Select window 9" 9 "select-window -t :=9" \
  "Kill window" x "kill-window" \
  "" \
  "-#[align=centre]Pane" "" "" \
  "Split pane to the left" h 'split-window -hb -c "#{pane_current_path}"' \
  "Split pane to the bottom" j 'split-window -v -c "#{pane_current_path}"' \
  "Split pane to the up" k 'split-window -vb -c "#{pane_current_path}"' \
  "Split pane to the right" l 'split-window -h -c "#{pane_current_path}"' \
  "Select pane by index" w "display-panes -d 0" \
  "Swap pane by index" W 'run-shell "${XDG_CONFIG_HOME}/tmux/scripts/swap_pane_by_index.sh"' \
  "Kill pane" q kill-pane \
  "" \
  "-#[align=centre]Layout" "" "" \
  "Default IDE" M-0 "select-layout '74cb,382x96,0,0{120x96,0,0,50,210x96,121,0,51,50x96,332,0,52}'" \
  "Even horizontal" M-1 "select-layout even-horizontal" \
  "Even vertical" M-2 "select-layout even-vertical" \
  "Main horizontal" M-3 "select-layout main-horizontal" \
  "Main vertical" M-4 "select-layout main-vertical" \
  "Tiled" M-5 "select-layout tiled" \
  "" \
  "-#[align=centre]Toggle Popup Pane" "" "" \
  "Zsh" f 'run-shell "${XDG_CONFIG_HOME}/tmux/scripts/display_popup.sh #{session_name} #{window_index} #{pane_current_path}"' \
  "Lazygit" g 'run-shell "${XDG_CONFIG_HOME}/tmux/scripts/display_popup.sh #{session_name} #{window_index} #{pane_current_path} lazygit"' \
  "Taskwarrior" t 'run-shell "${XDG_CONFIG_HOME}/tmux/scripts/display_popup.sh #{session_name} #{window_index} #{pane_current_path} taskwarrior-tui"' \
  "" \
  "-#[align=centre]Other" "" "" \
  "Prompt for a command" : "command-prompt" \
  "Enter copy mode" ] "copy-mode" \
  "" \
  "-#[align=centre]Tmux Plugin Manager" "" "" \
  "Install plugins" I "run-shell ${XDG_CONFIG_HOME}/tmux/plugins/tpm/bindings/install_plugins" \
  "Update plugins" U "run-shell ${XDG_CONFIG_HOME}/tmux/plugins/tpm/bindings/update_plugins" \
  "Clean plugins" M-u "run-shell ${XDG_CONFIG_HOME}/tmux/plugins/tpm/bindings/clean_plugins" \
  "" \
  "-#[align=centre]Tmux Resurrect" "" "" \
  "Restore environment" C-r "run-shell ${XDG_CONFIG_HOME}/tmux/plugins/tmux-resurrect/scripts/restore.sh" \
  "Save environment" C-s "run-shell ${XDG_CONFIG_HOME}/tmux/plugins/tmux-resurrect/scripts/save.sh"

